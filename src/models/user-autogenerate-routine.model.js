const db = require('../config/db');


const objetivosUsuario = async (id) => {
    //Tener encuenta si no tiene objetivos asignados, en ese caso no se le puede generar una rutina
    const [result] = await db.query( 
                `SELECT id, id_usuarios, id_objetivos, fecha
                FROM objetivos_usuarios
                WHERE id_usuarios = ?     
                ORDER by fecha DESC
                LIMIT 1;`, [id]);    
    
    return result;
}

const rutinasRealizadas = async (id) => {
// Rutinas que el usuario ha realizado
    const [result] = await db.query( 
            `SELECT rutinas_id
            FROM rutinas_usuarios
            WHERE usuarios_id = ?
            GROUP by rutinas_id
            ORDER BY rutinas_id ASC;`, [id]);        
    
    return result;
}

const rutinasAutogeneradas = async (id) => {
    //Obtener las rutinas que el usuario han sido sugeridas por el sistema
    const [result] = await db.query(
        `SELECT idrutina
        FROM autogenerated_routine
        WHERE idusuario=?
        GROUP by idrutina
        ORDER BY idrutina ASC;`, [id]);    
        
    return result;
}

const rutinaSugerida = async (obj) => {
    //Sugerimos el id de una rutina que el usuario no ha realizado y que tiene el mismo objetivo
    const { rutinas_realizadas } = obj;
   
    const [result] = await db.query(
        `SELECT
            id  
        FROM
            rutinas     
        WHERE
            id NOT IN (?) 
        ORDER BY
            RAND()    
        LIMIT 1; `, [rutinas_realizadas]);    
    
    
    return result;
}

const getById = async (id) => {
    //Obtener la rutina por id
    const [result] = await db.query(
        `SELECT 
        r.id AS rutina_id,
        r.nombre,
        r.observaciones AS rutina_observaciones,
        r.realizada,
        d.nivel,
        m.nombre AS metodo,
        r.nombre AS objetivo,       
        m.tiempo_aerobicos,
        m.tiempo_anaerobicos,
        m.observaciones AS metodo_observaciones,
        o.nombre as objetivo,
        m.descanso,
        r.objetivos_id,
        r.dificultad_id,
        r.metodos_id
      FROM rutinas r
      JOIN dificultad d ON r.dificultad_id = d.id
      JOIN metodos m ON r.metodos_id = m.id
      INNER JOIN objetivos AS o ON r.objetivos_id = o.id 
      WHERE r.id = ?`, [id]);    
    
    return result;
}

const getByIdExercises = async (id) => {
    //Obtener la rutina por id
    const [result] = await db.query(
        `SELECT eje.nombre,
            ert.series,
            ert.repeticiones,
            ert.dia,
            ert.comentario,            
            ert.id as id_Ejercicio,
            ert.orden
        from ejercicios_rutinas as ert
        JOIN ejercicios as eje ON eje.id = ert.ejercicios_id
        JOIN dificultad as dif ON eje.dificultad_id = dif.id
        WHERE rutinas_id = ?
        ORDER BY orden asc;`, [id]);    

    
    return result;
}

const insertRutinaUsuario = async (rutinaId, usuarioId) => {
    //Insertar la rutina realizada por el usuario    
    const [result] = await db.query(
        `INSERT INTO rutinas_usuarios (
            rutinas_id,
            usuarios_id,
            inicio,
            fin,
            compartida
        )
        VALUES (
            ?,
            ?,
            NOW(), 
            DATE_ADD(NOW(), INTERVAL 7 DAY), 0);`, [rutinaId, usuarioId]);    

    
    return result.insertId;
};

const insertEjerciciosUsuario = async (ejerciciosObj, id_rutina) => {
    
    const { id_Ejercicio, series, repeticiones, orden,comentario } = ejerciciosObj;

    const [result] = await db.query(
        `INSERT INTO ejercicios_usuarios (            
            ejercicios_id,
            rutinas_usuarios_id,
            series,
            repeticiones,            
            orden,
            comentario)
        VALUES (?, ?, ?, ?, ?, ?);`, 
        [id_Ejercicio, id_rutina, series, repeticiones, orden,comentario]);    

    
    return result;
}

const retunRutinaRDN = async () => {
    return [ { "rutinas_id": 0 } ];
}

const returnUser = async (id) => {
    //Obtener el usuario por id
    const [result] = await db.query(
        `SELECT id FROM usuarios WHERE id = ?;`, [id]);    
   
    return result;
}


module.exports = {    
    rutinasRealizadas, 
    objetivosUsuario,
    rutinasAutogeneradas,
    rutinaSugerida,
    getById,
    getByIdExercises,
    insertRutinaUsuario,
    retunRutinaRDN,
    returnUser,
    insertEjerciciosUsuario

};
