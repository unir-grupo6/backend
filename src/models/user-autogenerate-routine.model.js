const db = require('../config/db');

// 1 - Obtener los objetivos del usuario y guardarlos en un objeto
// 2 - obtener las rutinas que ha realizado con el objetivos_id que ha guardado en sus preferencias
// y guardamos las rutinas que ha realizado en el objeto
// 3 - Obtenemos las tutinas autogenerated_routine que son las rutinas sugeridas por el sistema
// y las aÃ±adimos al array del objeto
// 4 - Devolver de forma aleatoria rutinas que el usuario no ha realizado y tienen el mismo objetivo
// Esto devolvera un id de rutina, que sera la rutina que vamos a devolver al usuario


const objetivosUsuario = async (id) => {
    //Tener encuenta si no tiene objetivos asignados, en ese caso no se le puede generar una rutina
    const [result] = await db.query( 
                `SELECT id, id_usuarios, id_objetivos, fecha
                FROM objetivos_usuarios
                WHERE id_usuarios = ?     
                ORDER by fecha DESC
                LIMIT 1;`, [id]);    
    
    return result;
}

const rutinasRealizadas = async (id) => {
// Rutinas que el usuario ha realizado
    const [result] = await db.query( 
            `SELECT rutinas_id
            FROM rutinas_usuarios
            WHERE usuarios_id = ?
            GROUP by rutinas_id
            ORDER BY rutinas_id ASC;`, [id]);        
    
    return result;
}

const rutinasAutogeneradas = async (id) => {
    //Obtener las rutinas que el usuario han sido sugeridas por el sistema
    const [result] = await db.query(
        `SELECT idrutina
        FROM autogenerated_routine
        WHERE idusuario=?
        GROUP by idrutina
        ORDER BY idrutina ASC;`, [id]);    
        
    return result;
}

const rutinaSugerida = async (obj) => {
    //Sugerimos el id de una rutina que el usuario no ha realizado y que tiene el mismo objetivo
    const { objetivo, rutinas_realizadas } = obj;
   
    const [result] = await db.query(
        `SELECT
            id  
        FROM
            rutinas     
        WHERE
            objetivos_id = ? and id NOT IN (?) 
        ORDER BY
            RAND()    
        LIMIT 1; `, [objetivo,rutinas_realizadas]);    
    
    
    return result[0];
}

const getById = async (id) => {
    //Obtener la rutina por id
    const [result] = await db.query(
        `SELECT 
        r.id AS rutina_id,
        r.nombre,
        r.observaciones AS rutina_observaciones,
        r.realizada,
        d.nivel,
        m.nombre AS metodo,
        r.nombre AS objetivo,       
        m.tiempo_aerobicos,
        m.tiempo_anaerobicos,
        m.observaciones AS metodo_observaciones,
        o.nombre as objetivo,
        m.descanso
      FROM rutinas r
      JOIN dificultad d ON r.dificultad_id = d.id
      JOIN metodos m ON r.metodos_id = m.id
      INNER JOIN objetivos AS o ON r.objetivos_id = o.id 
      WHERE r.id = ?`, [id]);    
    
    return result[0];
}

const getByIdExercises = async (id) => {
    //Obtener la rutina por id
    const [result] = await db.query(
        `SELECT eje.nombre,
            ert.series,
            ert.repeticiones,
            ert.dia,
            ert.comentario
            from ejercicios_rutinas as ert
            JOIN ejercicios as eje ON eje.id = ert.ejercicios_id
            JOIN dificultad as dif ON eje.dificultad_id = dif.id
            WHERE rutinas_id = ?
            ORDER BY orden asc;`, [id]);    

    console.log(result, ' - RESULTADO DE EJERCICIOS POR ID - ARRAY COMPLETO');
    return result;
}

const autoGenerate = async (id) => {
   
    //Obtener el objetivo del usuario
    const result = objetivosUsuario(id)

    console.log(result, ' - VALOR DE RESULTADO EN MODELO');
    return result;
}

module.exports = {
    autoGenerate, 
    rutinasRealizadas, 
    objetivosUsuario,
    rutinasAutogeneradas,
    rutinaSugerida,
    getById,
    getByIdExercises
};
